@page "/"

@using Maple2.File.Parser.Xml.Item
@using Maplecodex2.Data.Helpers
@using Maplecodex2.Data.Models
@using Maplecodex2.Data.Services
@using Maplecodex2.Database.Pagination
@using Maplecodex2.Pages.Components
@using Maplecodex2.Pages.Tables
@using global::Serilog

@inject ItemService ItemServices

@inherits DataViewModel<Item>

<!-- Search container -->
<div class="item-align-flex unselectable">
    <!-- Filters -->
    <div class="item-align-columns">
        <div>
            @if (ItemId == 0)
            {
                <input @bind="@SearchBy" onselect="@ShowResults()" id="searchInput" class="form-inline mr-sm-2 option-fix" placeholder="Search..." />
            }
            <button class="button-3" style="margin-left:5px; margin-top: -3px;" @onclick="ResetTable">Back</button>
        </div>
    </div>

    <!-- Page options -->
    @if (ItemId == 0)
    {
        <div class="show-more">
            <label style="padding-left: 1vh;">
                Show
                <select @bind="@PageSize" class="form-inline input-sm">
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
            </label>
        </div>
    }
</div>

@if (ItemId == 0)
{
    <!-- Table Results -->
    <ErrorBoundary>
        <ChildContent>
            <ItemsTable Items="@PagedResults.Items" ItemId=OnClick />
        </ChildContent>
    </ErrorBoundary>

    <!-- Pagination -->
    <nav>
        <!--Results count-->
    <div class="item-align-columns container-flex">
            <div class="show-more">
                <label style="padding-left: 1vh;">
                    @(ItemServices.ResultsFromQuery.Count) Results where found.
                </label>
            </div>
        </div>
        <ul class="pagination pagination-sm justify-content-center" style="margin-bottom: 5rem;">
            @foreach (PagingLink link in Links)
            {
                <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Active ? "active" : null) @(link.Enabled ? null : "disabled")">
                    <span style="@(char.IsDigit(link.Text, 0) ? "width: 3.5rem; text-align: center;" : null)" class="unselectable btn-toolbar page-link span-color" href="#" data-toggle="tooltip" data-placement="bottom" title="@link.Info">@link.Text</span>
                </li>
            }
        </ul>
    </nav>
}
else
{
    <ItemDetails Id=ItemId />
}


@code {
    public int ItemId;

    private void OnClick(int value)
    {
        ItemId = value;
    }

    private void ResetTable()
    {
        ItemId = 0;
    }

    protected override void OnInitialized()
    {
        SearchBy = string.IsNullOrEmpty(SearchBy) ? "" : SearchBy;
        ShowResults().Wait();
    }

    public override Task ShowResults()
    {
        bool newSearch = Helper.VerifyNewSearch(SearchBy, PageSize);
        // Restore page 1 whenever is a new search.
        if (CurrentLink != null && CurrentLink.Page > 1 && newSearch)
        {
            CurrentLink.Page = 1;
        }

        PagedResults = ItemServices.GetItemsAsync(newSearch, SearchBy, (CurrentLink?.Page ?? 1), PageSize).Result;

        if (PagedResults == null)
        {
            CancellationTokenSource ct = new();
            Log.Warning("Results where null.");
            return Task.FromCanceled(ct.Token);
        }

        if (Links != null && Links.Any())
        {
            Links.Clear();
        }

        Links = Helper.CreatePaginationLinks(PagedResults, 5);
        return Task.CompletedTask;
    }
}