@using Maplecodex2.Data
@using Maplecodex2.Data.Services
@using Maplecodex2.Data.Models
@using Maplecodex2.Data.Helpers
@using Maplecodex2.Database.Core
@using Microsoft.AspNetCore.Mvc

@inject ItemService ItemService

<!-- Container results. -->
<div class="container">
    <div class="item-align-flex unselectable">
        <!-- Date -->
        <div class="item-align-columns">
            <div>
                <label>
                    Search:
                </label>
                <div class="input-group input-group-sm mb-3">
                    <input id="searchInput" class="form-control" @bind-value="@SearchValue" @bind-value:event="oninput" type="search" placeholder="Type id or name" aria-label="Search">
                </div>
            </div>
        </div>
        <!-- Page options -->
        <div class="show-more">
            <label style="padding-left: 1vh;">
                Show
                <select @bind="@PageSize" onselect="@OnClick()" aria-controls="ItemTable" class="form-inline input-sm">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                </select>
            </label>
        </div>
    </div>
    <!-- Item Datatable -->
    <div style="width: auto;" id="ItemTable_Wrapper">
        <table class="table-shadow table table-responsive table-bordered dataTable dtr-inline justify-content-center" id="ItemTable">
            <thead>
                <tr role="row" class="unselectable th-index-style">
                    <th class="bg-success" rowspan="1" colspan="1">Icon</th>
                    <th class="bg-success" rowspan="1" colspan="1">ID</th>
                    <th class="bg-success" rowspan="1" colspan="1">Slot</th>
                    <th class="bg-success" rowspan="1" colspan="1">Name</th>
                    <th class="bg-success" rowspan="1" colspan="1">Feature</th>
                    <th class="bg-success" rowspan="1" colspan="1">Type</th>
                </tr>
            </thead>
            <tbody id="itemTable">
                @foreach (Item newItem in PagedItems.Items)
                {
                    <tr role="row" class="tr-index-style">
                        <DisplayIcon itemIcon="@newItem?.Icon" />
                        <td class="col-xs-1 unselectable uncopied" id="itemTableId">@newItem?.Id</td>
                        <td class="col-xs-1">@newItem?.Slot</td>
                        <td class="col-xs-5">@newItem?.Name</td>
                        <td class="col-xs-1">@newItem?.Feature</td>
                        <td class="col-xs-1">@newItem?.Type</td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <div>
            <nav>
                <ul class="pagination pagination-sm justify-content-center">
                    @foreach (PagingLink link in Links)
                    {
                        <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Active ? "active" : null) @(link.Enabled ? null : "disabled")">
                            <span style="@(char.IsDigit(link.Text, 0) ? "width: 3.5rem; text-align: center;" : null)" class="unselectable btn-toolbar page-link span-color" href="#" data-toggle="tooltip" data-placement="bottom" title="@link.Info">@link.Text</span>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

@code {
    [BindProperty]
    public int PageSize { get; set; }
    public string? SearchValue { get; set; }
    public DataHelper Helper { get; set; } = new();

    public PagedList<Item>? PagedItems;
    public List<PagingLink>? Links;
    public PagingLink? CurrentLink;

    // Initializer
    protected override async Task OnInitializedAsync()
    {
        FirstInitialize();
        PagedItems = await ItemService.GetItemAsync(true, SearchValue, 1, PageSize);

        if (Links != null && Links.Any())
        {
            Links.Clear();
        }
        Links = Helper.CreatePaginationLinks(PagedItems, 5);
        CurrentLink = Links?.First(t => t.Enabled) ?? new PagingLink(1, false, "", "");
    }

    // This is called by the pagination nav
    public Task OnSelectedPage(PagingLink link)
    {
        if (PagedItems == null || link.Page == PagedItems.CurrentPage || !link.Enabled)
        {
            return Task.CompletedTask;
        }

        CurrentLink = link;
        PagedItems.CurrentPage = link.Page;
        if (Links != null && Links.Any())
        {
            Links.Clear();
        }
        Links = Helper.CreatePaginationLinks(PagedItems, 5);
        return Task.CompletedTask;
    }

    public async Task OnClick()
    {
        bool newSearch = Helper.VerifyNewSearch(SearchValue);

        // Restore page 1 whenever is a new search.
        if (CurrentLink != null && CurrentLink.Page > 1 && newSearch)
        {
            CurrentLink.Page = 1;
        }
        PagedItems = await ItemService.GetItemAsync(newSearch, SearchValue, (CurrentLink?.Page ?? 1), PageSize);

        if (PagedItems == null)
        {
            return;
        }

        if (Links != null && Links.Any())
        {
            Links.Clear();
        }
        Links = Helper.CreatePaginationLinks(PagedItems, 5);
    }

    private void FirstInitialize()
    {
        SearchValue = "";
        PageSize = 10;
        Helper.FirstInitialize(SearchValue);
    }
}